print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="Margins", xlab="Time", ylab="BCR Free Survival")
fit <- survfit(Surv(Time, Status) ~ MRI_EPE, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE", xlab="Time", ylab="BCR Free Survival")
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ MRI_SVI, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI SVI", xlab="Time", ylab="BCR Free Survival")
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ Path_SVI, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="Pathology SVI", xlab="Time", ylab="BCR Free Survival")
fit <- survfit(Surv(Time, Status) ~ Path_EPE, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="Pathology EPE", xlab="Time", ylab="BCR Free Survival")
fit <- survfit(Surv(Time, Status) ~ EPE_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="Pathology EPE", xlab="Time", ylab="BCR Free Survival")
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score", xlab="Time", ylab="BCR Free Survival")
fit <- survfit(Surv(Time, Status) ~ numLesions, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
fit <- survfit(Surv(Time, Status) ~ MRI_Path_Agree, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\NoMargins.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ MRI_Path_Agree, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score", xlab="Time", ylab="BCR Free Survival")
fit <- survfit(Surv(Time, Status) ~ MRI_Path_Agree, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
library(survival)
library(survminer)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
library(survival)
#library(survminer)
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
library(survival)
library(survminer)
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
library(survminer)
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
library(survminer)
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\Pirads_score.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
#view structure of data
#str(data1)
fit <- survfit(Surv(Time, Status) ~ PIRADS_score, data = data1)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = FALSE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = "safe",
title="MRI EPE Score - No Margins", xlab="Time", ylab="BCR Free Survival")
g <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData.csv"
data1 <- read.csv(g, header=TRUE, stringsAsFactors=FALSE)
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_neg.csv"
data_neg <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_pos.csv"
data_pos <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
########### VERSION 3 ##############
###!!!! UPDATE
fg1 = data_pos$Vol_P5
bg1 = data_neg$Vol_P5
roc<-roc.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
pr<-pr.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
roc
pr
plot(roc)
curve.points1<-roc$curve
###!!!! UPDATE
opt_cut <- cutpointr(data1,Vol_P5, Status, direction = ">=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = youden)
opt_cut$optimal_cutpoint
plot(pr)
curve.points2<-pr$curve
f1 <- vector()
#f1 <- array(-1, 1,dim=c(dim(curve.points2)[1]))
for (i in 1:dim(curve.points2)[1]) {
f1[i]=2/(1/curve.points2[i,1]+1/curve.points2[i,2])
}
max(f1)
which.max(f1)
pr$curve[which.max(f1),1:3]
library(PRROC)
library(cutpointr)
###!!!! UPDATE
fg1 = data_pos$Vol_P5
bg1 = data_neg$Vol_P5
roc<-roc.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
pr<-pr.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
roc
pr
plot(roc)
curve.points1<-roc$curve
###!!!! UPDATE
opt_cut <- cutpointr(data1,Vol_P5, Status, direction = ">=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = youden)
opt_cut$optimal_cutpoint
plot(pr)
curve.points2<-pr$curve
f1 <- vector()
#f1 <- array(-1, 1,dim=c(dim(curve.points2)[1]))
for (i in 1:dim(curve.points2)[1]) {
f1[i]=2/(1/curve.points2[i,1]+1/curve.points2[i,2])
}
max(f1)
which.max(f1)
pr$curve[which.max(f1),1:3]
opt_cut <- cutpointr(data1,Vol_P5, Status, direction = ">=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = youden)
opt_cut$optimal_cutpoint
opt_cut2 <- cutpointr(data1,Vol_P5, Status, direction = ">=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = F1_score)
opt_cut2$optimal_cutpoint
plot_metric(opt_cut)
plot(opt_cut)
plot_roc(opt_cut)
plot_precision_recall(opt_cut2)
opt_cut <- cutpointr(data1,SVR, Status, direction = "<=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = youden)
opt_cut$optimal_cutpoint
plot_metric(opt_cut)
plot_roc(opt_cut)
opt_cut <- cutpointr(data1,ADC10, Status, direction = "<=", pos_class = 1,
neg_class = 0, method = maximize_metric, metric = youden)
opt_cut$optimal_cutpoint
plot_metric(opt_cut)
plot_roc(opt_cut)
###!!!! UPDATE
fg1 = data_pos$ADC10
bg1 = data_neg$ADC10
roc<-roc.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
pr<-pr.curve(scores.class0=fg1, scores.class1=bg1, curve=TRUE)
roc
pr
plot(roc)
curve.points1<-roc$curve
library(glmnet)
library(survival)
data(CoxExample)
install.packages("glmnet")
library(glmnet)
library(survival)
data(CoxExample)
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_x_continuous.csv"
data_x <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_y.csv"
data_y <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
x<-CoxExample$x
y<-CoxExample$y
fit <- glmnet(x,y,family="cox")
fit <- glmnet(data_x,data_y,family="cox")
x[1:5,]
x1<-data.matrix(data_x)
y1<-data.matrix(data_y)
fit <- glmnet(x1,y1,family="cox")
fit <- glmnet(x,y,family="cox")
fit1 <- glmnet(x1,y1,family="cox")
plot(fit)
plot(fit1)
coef(fit, s=0.05)
coef(fit1, s=0.05)
coef(fit1, s=4)
coef(fit1, s=0.1)
coef(fit1, s=0.01)
coef(fit1, s=0.02)
coef(fit1, s=0.03)
coef(fit1, s=0.04)
library(glmnet)
library(survival)
data(CoxExample)
x<-CoxExample$x
y<-CoxExample$y
fit <- glmnet(x,y,family="cox")
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_x_continuous.csv"
data_x <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
x1<-data.matrix(data_x)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_y.csv"
data_y <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
y1<-data.matrix(data_y)
fit1 <- glmnet(x1,y1,family="cox")
plot(fit)
plot(fit1)
coef(fit, s=0.05)
coef(fit1, s=0.04)
set.seed(1)
cvfit <- cv.glmnet(x,y,family="cox", type.measure="C")
plot(cvfit)
set.seed(1)
cvfit1 <- cv.glmnet(x1,y1,family="cox", type.measure="C")
plot(cvfit1)
cvfit$lambda.min
cvfit1$lambda.min
lam<-cvfit1$lambda.min
coef(fit1, s=lam)
lam_se<-cvfit1$lambda.min
coef(fit1, s=lam_Se)
coef(fit1, s=lam_se)
lam<-cvfit1$lambda.min
lam
coef(fit1, s=lam)
lam_se<-cvfit1$lambda.min
lam_se
coef(fit1, s=lam_se)
set.seed(2)
nobs <- 100; nvars <- 15
xvec <- rnorm(nobs * nvars)
xvec[sample.int(nobs * nvars, size = 0.4 * nobs * nvars)] <- 0
x <- matrix(xvec, nrow = nobs) # non-sparse x
x_sparse <- Matrix::Matrix(xvec, nrow = nobs, sparse = TRUE) # sparse x
# create start-stop data response
beta <- rnorm(5)
fx <- x_sparse[, 1:5] %*% beta / 3
ty <- rexp(nobs, drop(exp(fx)))
tcens <- rbinom(n = nobs, prob = 0.3, size = 1)
starty <- runif(nobs)
yss <- Surv(starty, starty + ty, tcens)
library(glmnet)
library(survival)
#### EXAMPLE  ####
data(CoxExample)
x<-CoxExample$x
y<-CoxExample$y
fit <- glmnet(x,y,family="cox")
plot(fit)
coef(fit, s=0.05)
set.seed(1)
cvfit <- cv.glmnet(x,y,family="cox", type.measure="C")
plot(cvfit)
#### ACTUAL DATA #####
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_x.csv"
data_x <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
x1<-data.matrix(data_x)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_y.csv"
data_y <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
y1<-data.matrix(data_y)
fit1 <- glmnet(x1,y1,family="cox")
plot(fit1)
coef(fit1, s=0.04)
#cross-validation
set.seed(1)
cvfit1 <- cv.glmnet(x1,y1,family="cox", type.measure="C")
plot(cvfit1)
#find optimal lambda (where CV-error curve hits its minimum)
lam<-cvfit1$lambda.min
lam
coef(fit1, s=lam)
#find lambda for regularized model with CV-error within 1 st.dev of min
lam_se<-cvfit1$lambda.min
lam_se
coef(fit1, s=lam_se)
####### Example for stop-start data #####
#I don't think this is actually needed as my data isn't left censored?
set.seed(2)
nobs <- 100; nvars <- 15
xvec <- rnorm(nobs * nvars)
xvec[sample.int(nobs * nvars, size = 0.4 * nobs * nvars)] <- 0
x <- matrix(xvec, nrow = nobs) # non-sparse x
x_sparse <- Matrix::Matrix(xvec, nrow = nobs, sparse = TRUE) # sparse x
# create start-stop data response
beta <- rnorm(5)
fx <- x_sparse[, 1:5] %*% beta / 3
ty <- rexp(nobs, drop(exp(fx)))
tcens <- rbinom(n = nobs, prob = 0.3, size = 1)
starty <- runif(nobs)
yss <- Surv(starty, starty + ty, tcens)
fit1 <- glmnet(x1,y1,family="cox")
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_x.csv"
data_x <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
x1<-data.matrix(data_x)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_y.csv"
data_y <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
y1<-data.matrix(data_y)
fit1 <- glmnet(x1,y1,family="cox")
plot(fit1)
coef(fit1, s=0.04)
any(is.na(x1))
which(any(is.na(x1)))
which(is.na(x1))
x1(9286)
x1[9286]
x1[9285]
x1[9265:9285]
g1 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_x.csv"
data_x <- read.csv(g1, header=TRUE, stringsAsFactors=FALSE)
x1<-data.matrix(data_x)
g2 <- "T:\\MIP\\Katie_Merriman\\Project1Data\\Rstudio_data\\AllLesionData_y.csv"
data_y <- read.csv(g2, header=TRUE, stringsAsFactors=FALSE)
y1<-data.matrix(data_y)
fit1 <- glmnet(x1,y1,family="cox")
plot(fit1)
coef(fit1, s=0.04)
#cross-validation
set.seed(1)
cvfit1 <- cv.glmnet(x1,y1,family="cox", type.measure="C")
plot(cvfit1)
#find optimal lambda (where CV-error curve hits its minimum)
lam<-cvfit1$lambda.min
lam
coef(fit1, s=lam)
#find lambda for regularized model with CV-error within 1 st.dev of min
lam_se<-cvfit1$lambda.min
lam_se
coef(fit1, s=lam_se)
mean(mtcars$mpg)
example <- matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol=2)
View(example)
View(example)
install.packages(c("ggplot2","devtools","lme4"))
install.packages(c("ggplot2", "devtools", "lme4"))
source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
biocLite()
biocLite("GenomicFeatures")
BiocManager::install(c("GenomicFeatures"))
install.packages("devtools")
devtools::install_github("rstudio/tensorflow")
help("devtools")
sessionInfo()
install.packages("KernSmooth")
library("Kernsmooth")
library(KernSmooth)
